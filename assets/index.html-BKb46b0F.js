import{_ as e,c as n,b as i,a as s,o as p}from"./app-B19vJ32T.js";const t={};function h(l,a){return p(),n("div",null,[...a[0]||(a[0]=[i(`<h2 id="_1-1-例-身份证号的性别判断" tabindex="-1"><a class="header-anchor" href="#_1-1-例-身份证号的性别判断"><span>1.1 例：身份证号的性别判断</span></a></h2><p>身份证号顺序码第三位,偶-女性,奇-男性</p><p><strong>I(imput) P(processing) O(output)</strong></p><div class="language-python line-numbers-mode" data-highlighter="shiki" data-ext="python" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-python"><span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;"># 身份证号码的判断程序（这是一个注释）</span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">id_code</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">=</span><span style="--shiki-light:#998418;--shiki-dark:#B8A965;">input</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">请输入18位身份证号码:</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">)</span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">number</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">=</span><span style="--shiki-light:#998418;--shiki-dark:#B8A965;">int</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">id_code</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">[</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">-</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;">2</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">])</span></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">if</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">	number</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">%</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;">2</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">==</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;">0</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">:</span></span>
<span class="line"><span style="--shiki-light:#998418;--shiki-dark:#B8A965;">    print</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">女</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">)</span></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">else</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">:</span></span>
<span class="line"><span style="--shiki-light:#998418;--shiki-dark:#B8A965;">    print</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">男</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">)</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p><code>input</code> 转化为字符串</p><p><code>int()</code> 转化为整数, 从而进行数值运算 （注意：不四舍五入地转化成整数；浮点数字符串不能直接转化成整数，要先用float）</p><p><code>float()</code> 转化为浮点数</p><p><code>str</code>代表字符串， <code>int</code> 代表数值</p><p>=意味着赋值,== 意味着判断是否等于 if else:<strong>分支语句</strong></p><p>字符串必须要用引号引用</p></blockquote><p>另强调,使用英文输入法的标点;拼写注意大小写</p><h2 id="_1-2-基本概念" tabindex="-1"><a class="header-anchor" href="#_1-2-基本概念"><span>1.2 基本概念</span></a></h2><h3 id="_1-注释" tabindex="-1"><a class="header-anchor" href="#_1-注释"><span>1.注释</span></a></h3><p>单行注释:见上方 多行注释:三单引号 回车<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo>⋯</mo></mrow><annotation encoding="application/x-tex">\\cdots</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.313em;"></span><span class="minner">⋯</span></span></span></span>另起一行 三单引号</p><h3 id="_2-变量" tabindex="-1"><a class="header-anchor" href="#_2-变量"><span>2.变量</span></a></h3><p>变量类型,变量名称,变量值</p><p>变量命名规则:</p><ul><li>名称不能出现空格,@#这类符号也会报错</li><li>首字符不能用数字</li><li>不能用python中的关键字</li><li>最好别用中文,也不要用python内置函数(不会弹报错,但函数会覆盖命名)</li></ul><h3 id="_3-关键字" tabindex="-1"><a class="header-anchor" href="#_3-关键字"><span>3.关键字</span></a></h3><p>在交互模式下调出关键字</p><div class="language-python line-numbers-mode" data-highlighter="shiki" data-ext="python" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-python"><span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">import</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">	keyword</span></span>
<span class="line"><span style="--shiki-light:#998418;--shiki-dark:#B8A965;">print</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">keyword</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">kwlist</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">)</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>需要辨认出哪些是关键字，关键字共有35个</p><p>True / False / None / and / as / assert / async / await / break / class /</p><p>continue / def / del / elif / else / except / finally / for / from / global /</p><p>if / import / in / is / lambda / nonlocal / not / or / pass / raise /</p><p>return / try / while / with / yield</p><h3 id="_4-缩进-程序框架" tabindex="-1"><a class="header-anchor" href="#_4-缩进-程序框架"><span>4.缩进,程序框架</span></a></h3><p><strong>缩进是表明程序框架的唯一手段</strong> tab和空格不要混用,<strong>推荐都用tab</strong></p><h2 id="_1-3-数据类型" tabindex="-1"><a class="header-anchor" href="#_1-3-数据类型"><span>1.3 数据类型</span></a></h2><h3 id="一-分类" tabindex="-1"><a class="header-anchor" href="#一-分类"><span>一，分类</span></a></h3><h5 id="基本数据类型" tabindex="-1"><a class="header-anchor" href="#基本数据类型"><span>基本数据类型</span></a></h5><ul><li>数值：整数，浮点数，虚数</li><li>字符串</li><li>布尔类型:True False</li><li>空类型:None</li></ul><h5 id="组合数据类型" tabindex="-1"><a class="header-anchor" href="#组合数据类型"><span>组合数据类型</span></a></h5>`,28),s("ul",null,[s("li",null,"元组:不可被改变的 (0,2,4,6)"),s("li",null,"列表:可改变的 [0,1,1,2]"),s("li",null,"集合:无序,不重复(元素去重)"),s("li",{"中国:’北京‘’,’美国:华盛顿":""},"字典:成对出现,快速查找 ")],-1),i(`<h3 id="二-数值类型" tabindex="-1"><a class="header-anchor" href="#二-数值类型"><span>二， 数值类型</span></a></h3><h4 id="_1-类型" tabindex="-1"><a class="header-anchor" href="#_1-类型"><span>1.类型</span></a></h4><p>整数类型，浮点数类型，复数类型（大概率用不到）</p><h4 id="_2-整数类型" tabindex="-1"><a class="header-anchor" href="#_2-整数类型"><span>2.整数类型</span></a></h4><p>与数学中整数定义一致，取值范围没有限制</p><p>（1） OX，Ox开头表示十六进制数；OO，Oo开头表示八进制数；OB，Ob开头表示二进制数<br> 进制的转换</p><p>（2）<code>pow(x,y)</code> 返回 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msup><mi>x</mi><mi>y</mi></msup></mrow><annotation encoding="application/x-tex">x^y</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6644em;"></span><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.6644em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.03588em;">y</span></span></span></span></span></span></span></span></span></span></span> 的值</p><h4 id="_3-浮点数类型" tabindex="-1"><a class="header-anchor" href="#_3-浮点数类型"><span>3.浮点数类型</span></a></h4><p>与数学中实数一致，有<strong>小数或小数点</strong>的数字，取值范围与精度有限制，所以不用浮点数作比较运算</p><p>例：”96e4“科学计数法，表示 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mn>96</mn><mo>∗</mo><msup><mn>10</mn><mn>4</mn></msup></mrow><annotation encoding="application/x-tex">96*10^4</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">96</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.8141em;"></span><span class="mord">1</span><span class="mord"><span class="mord">0</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">4</span></span></span></span></span></span></span></span></span></span></span> ,也是浮点数</p><h3 id="三-算数运算-数值" tabindex="-1"><a class="header-anchor" href="#三-算数运算-数值"><span>三，算数运算(数值)</span></a></h3><p><code>x/y</code> 结果为<strong>浮点数</strong> ；<code>x//y</code> 除法取整；<code>x%y</code> 除法取余 ; <code>x**y</code> 表示乘方</p><p>运算优先级（从高到低）： （）；幂运算；加减运算符；算数运算符；关系运算符；赋值运算符</p><blockquote><p>幂运算符并列，从右开始运算；左侧有符号，幂运算优先；右侧有符号，幂运算优先</p></blockquote><p>复合运算运算符：符号与=没有空格</p><blockquote><p><code>x+=1</code> 表示x=x+1</p></blockquote><p>关系运算符：输出结果为布尔类型</p><blockquote><p><code>!=</code> 表示 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo>≠</mo></mrow><annotation encoding="application/x-tex">\\not=</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8889em;vertical-align:-0.1944em;"></span><span class="mrel"><span class="mord vbox"><span class="thinbox"><span class="rlap"><span class="strut" style="height:0.8889em;vertical-align:-0.1944em;"></span><span class="inner"><span class="mord"><span class="mrel"></span></span></span><span class="fix"></span></span></span></span></span></span><span class="base"><span class="strut" style="height:0.3669em;"></span><span class="mrel">=</span></span></span></span> ; <code>&gt;=</code> 表示 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo>≥</mo></mrow><annotation encoding="application/x-tex">\\geq</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.7719em;vertical-align:-0.136em;"></span><span class="mrel">≥</span></span></span></span></p></blockquote><p>内置的算术运算函数</p><blockquote><p><code>abs(x)</code> x的绝对值</p><p><code>round(x,[ndigits])</code> 对x四舍五入，保留ndigits位小数， <code>round(x)</code> 返回四舍五入的整数值（这里会省略末尾的0）</p><p><code>max(a,b,c,....)</code> 找最大值</p></blockquote><h2 id="_1-4-字符串" tabindex="-1"><a class="header-anchor" href="#_1-4-字符串"><span>1.4 字符串</span></a></h2><p>1、用单引号或者双引号或者三引号括起来的零个一个或多个字符</p><p>2、注意区分 字符串，变量，数字和数字字符串</p><h4 id="_3、转义字符" tabindex="-1"><a class="header-anchor" href="#_3、转义字符"><span>3、转义字符“\\&quot;</span></a></h4><p>输出带引号的字符串，转义外部的引号即可</p><blockquote><p><code>\\n</code> 换行,光标在下行行首</p><p><code>\\r</code> 回车,光标在本行行首</p><p><code>\\t</code> 水平制表</p></blockquote><h4 id="_4-操作符" tabindex="-1"><a class="header-anchor" href="#_4-操作符"><span>4.操作符</span></a></h4><blockquote><p>+拼接字符串</p><p>*复制字符串,0或负整数结果为空字符串,不能输浮点数</p><p><code>x in s</code>判断x是否是s的子串,返回布尔值,x如果是连接那么s中也连接才是子串</p></blockquote><p>5.字符串是一种可遍历结构,可以使用for循环对它进行遍历,遍历的次数为字符数(包括空格在内,空格算一个)</p><h4 id="_6-字符串索引" tabindex="-1"><a class="header-anchor" href="#_6-字符串索引"><span>6.字符串索引</span></a></h4><p><code>&lt;string&gt;[&lt;索引&gt;]</code> <strong>最左端标记为0</strong> ,最右端第一个字符为 -1,标记的编号就叫做索引</p><h4 id="_7-字符串切片" tabindex="-1"><a class="header-anchor" href="#_7-字符串切片"><span>7.字符串切片</span></a></h4><p><code>&lt;string&gt;[x:y]</code> 从索引后面取y个,空格占y中一位，但是输出没有</p><blockquote><p>超出索引不会报错</p><p>正向索引时首位标为0，反向索引时末尾标为-1</p><p>使用反向索引时，返回依旧是从左往右的</p><p>可以同时使用正反索引</p><p>start值与end值都可以为空（表示开头和结尾），都为空时一般用于字符串复制</p></blockquote><h4 id="_8-字符串处理函数" tabindex="-1"><a class="header-anchor" href="#_8-字符串处理函数"><span>8.字符串处理函数</span></a></h4><p><code>len()</code> 返回字符串长度(标点、空格长度为1)，也可返回元组、列表、集合、字典（表示成员个数）等数据类型的长度</p><p><code>str()</code> 转化成字符串</p><p><code>ord()</code> 将单个字符转换为Unicode编码</p><blockquote><p><code>ord(&#39;a&#39;)</code> 97 ; <code>ord(&#39;A&#39;)</code> 65 ；0为48；空格为32；小写字母&gt;大写字母</p></blockquote><p><code>chr()</code> 将编码转换为对应的符号</p><p>以下s表示字符串</p><p><code>s.lower()</code> 大写变小写； <code>s.upper()</code> 小写变大写 ，这两个返回的是副本</p><p><code>s.isdigit()</code> 当s所有字符都是阿拉伯数字时返回true</p><p><code>s.isspace()</code> 当s所有字符都是空格返回true</p><p><code>s.endswith(suffix)</code> <code>s.startswith(prefix)</code> 判断开头结尾是不是</p><p><code>s.split(sep)</code> 返回一个列表，由s根据sep分割的部分构成</p><p><code>s.join()</code> 列表变成字符串，用s分割</p><p><code>s.count(sub)</code> 返回s中sub出现的次数</p><p><code>s.replace(old,new)</code> 返回s的副本，所有old子串替换成new</p><p><code>s.strip([chars])</code> 去除字符串两端（中间的不去除）chars中列出的字符，不改变原字符串</p><h4 id="_9-字符串格式化" tabindex="-1"><a class="header-anchor" href="#_9-字符串格式化"><span>9.字符串格式化</span></a></h4><h4 id="_10-字符串比较" tabindex="-1"><a class="header-anchor" href="#_10-字符串比较"><span>10.字符串比较</span></a></h4><p><code>&gt;,&gt;=,&lt;,&lt;=</code> 只能用于同类型之间的比较（整数，浮点数，布尔值），否则有TypeError</p><p><code>==,!=</code> 任何数据类型之间都可以比较， <code>!=</code> 判断是否不相等</p><h2 id="一些函数" tabindex="-1"><a class="header-anchor" href="#一些函数"><span>一些函数</span></a></h2><h4 id="type函数" tabindex="-1"><a class="header-anchor" href="#type函数"><span>type函数</span></a></h4><p>用于判断类型</p><div class="language-python line-numbers-mode" data-highlighter="shiki" data-ext="python" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-python"><span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">temp</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">=</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;">100</span></span>
<span class="line"><span style="--shiki-light:#998418;--shiki-dark:#B8A965;">type</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">temp</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">)</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="赋值语句" tabindex="-1"><a class="header-anchor" href="#赋值语句"><span>赋值语句</span></a></h4><p>同步赋值语句</p><p>可以用于变量交换</p><div class="language-python line-numbers-mode" data-highlighter="shiki" data-ext="python" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-python"><span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">a</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">b</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">=</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">b</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">a</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h4 id="imput-函数" tabindex="-1"><a class="header-anchor" href="#imput-函数"><span>imput()函数</span></a></h4><p>括号里可以写提示语句 返回值都会是字符串</p><h4 id="print-函数" tabindex="-1"><a class="header-anchor" href="#print-函数"><span>print()函数</span></a></h4><p>用于在控制台输出 没有返回值（返回值是None） sep参数可以修改空格符号,默认为空格且最后回车，如<code>sep=“#”</code></p><div class="language-python line-numbers-mode" data-highlighter="shiki" data-ext="python" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-python"><span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">for</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> i </span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">in</span><span style="--shiki-light:#998418;--shiki-dark:#B8A965;"> range</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;">3</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">):</span><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;"> #循环打印三次，每次换行</span></span>
<span class="line"><span style="--shiki-light:#998418;--shiki-dark:#B8A965;">	print</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">i</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">)</span></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">for</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> i </span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">in</span><span style="--shiki-light:#998418;--shiki-dark:#B8A965;"> range</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;">3</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">):</span><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;"> #循环打印三次，每次不换行，结尾为#</span></span>
<span class="line"><span style="--shiki-light:#998418;--shiki-dark:#B8A965;">    print</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">i</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">end</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">=</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&#39;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">#</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&#39;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">)</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="eval-函数" tabindex="-1"><a class="header-anchor" href="#eval-函数"><span>eval()函数</span></a></h4><p>以python表达式的方式解析并执行<strong>字符串</strong></p><p>+将字符串拼接起来，各种意义上的连起来，比如“5”+“1*2”认为是51乘2</p><p>一个小tips：在文件夹里找到文件时，双击打开会显示程序，输入完运行会光速退出，所以右键进idle</p>`,71)])])}const r=e(t,[["render",h]]),c=JSON.parse('{"path":"/python/chapter-1/","title":"Chapter 1","lang":"zh-CN","frontmatter":{"title":"Chapter 1","permalink":"/python/chapter-1/","createTime":"2025/10/12 10:24:43"},"readingTime":{"minutes":6.12,"words":1835},"git":{"createdTime":1760237125000,"updatedTime":1761402120000,"contributors":[{"name":"LucyWWWmm","username":"LucyWWWmm","email":"13940274062@163.com","commits":4,"avatar":"https://avatars.githubusercontent.com/LucyWWWmm?v=4","url":"https://github.com/LucyWWWmm"}],"changelog":[{"hash":"830adc24b8da48a93429bd460f40b79097ced75b","time":1761402120000,"email":"13940274062@163.com","author":"LucyWWWmm","message":"sixth"},{"hash":"744bb0a4c404ed40a710a48e59b1298c5a87ec1e","time":1760937554000,"email":"13940274062@163.com","author":"LucyWWWmm","message":"fourth"},{"hash":"1f533837198345750e1492f538dbfd58dd938787","time":1760283379000,"email":"13940274062@163.com","author":"LucyWWWmm","message":"third"},{"hash":"194ea9cb1e0702768554427e0881c3d9888c1068","time":1760237125000,"email":"13940274062@163.com","author":"LucyWWWmm","message":"new notes"}]},"filePathRelative":"python/chapter-1.md","headers":[]}');export{r as comp,c as data};
